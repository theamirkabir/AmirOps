- name: < Play 1 > ==> PREPARING SYSTEM CONFIGURATION
  hosts: all
  remote_user: asnible
  become: yes
  tasks:
  - name: Turning off the swap memory...
    shell: swapoff -a
  - name: Commenting out the swap entry in fstab file...
    shell: sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

- name: < Play 2 > ==> CONFIGURING THE NETWORK SECURITY POLICIES
  hosts: all
  remote_user: ansible
  become: yes
  tasks:
  - name: Allowing k8s services in ufw...
    community.general.ufw:
      port: "{{ item }}"
      rull: allow
      proto: tcp
    loop:
    - 6443
    - 2379
    - 2380
    - 10250
    - 10251
    - 10252
    - 10257
    - 10259
    - 179
  - name: Allowing k8s services in ufw (udp)
    community.general.ufw:
      rull: allow
      port: {? {item: ''} : ''}
      proto: udp
    loop:
    - 4789
- name: < Play 3 > ==> CONFIGURING THE SYSTEM KERNEL MODULES
  hosts: all
  remote_user: ansible
  become: yes
  tasks:
  - name: Persisting the required kernel modules...
    community.general.modprobe:
      name: "{{ item }}"
      persistent: present
      state: present
    loop:
    - overlay
    - br_netfilter
  - name: Ensuring necessary kernel modules are loaded for containerd...
    copy:
      dest: /etc/modules-load.d/containerd.conf
      content: |
        overlay
        br_netfilter
  - name: Ensuring sysctl parameters are set that are required for k8s networking (IPv4)...
    ansible.builtin.sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      state: present
  - name: Ensure sysctl parameters are set that are required for k8s networking (IPv4 forwarding)...
    ansible.builtin.sysctl:
      name: net.ipv4.ip_forward
      value: 1
      state: present
  - name: Ensure sysctl parameters are set that are required for k8s networking (IPv6)...
    ansible.builtin.sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      state: present
  - name: Applying sysctl parameters...
    shell: sysctl --system
- name: < Play 4 > ==> INSTALL & PREPARE THE CONTAINER-RUNTIME ON NODES
  hosts: all
  remote_user: ansible
  become: yes
  tasks:
  - name: Adding containerd repo...
    shell: |
      echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - name: apt update...
    apt:
      update-cache: yes
  - name: Installing containerd...
    apt:
      name: containerd.io
      state: latest
  - name: Preserving the default configs for containerd...
    shell: containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
  - name: Setting the "SystemdCgroup" to value "true" in containerd configs...
    shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  - name: Restarting and enabling the containerd service...
    service:
      name: containerd
      state: restarted
      enabled: yes

- name: < Play 5 > ==> INSTALLING KUBERNETES FINALLY
  hosts: all
  remote_user: ansible
  become: yes
  tasks:
  - name:
    file:
      path: /etc/apt/sources.list.d/kubernetes.list
      state: touch
      mode: 644
  - name: Adding  the Kubernetes apt repository...
    shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - name: installing kubelet, kubeadm and kubectl...
    #  - name: managing the repo...
    #    shell: sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list # helps tools such as command-not-found to work correctly
    apt:
      name:
      - kubelet
      - kubeadm
      - kubectl
      state: latest
  - name: Enabling and starting kubelet...
    service:
      name: kubelet
      enabled: yes
      state: started

